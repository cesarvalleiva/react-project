{"ast":null,"code":"import { basePath, apiVersion } from './config';\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../utils/constants';\nimport jwtDecode from 'jwt-decode';\nexport function getAccessTokenApi() {\n  const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n  if (!accessToken || accessToken === 'null') {\n    return null;\n  }\n\n  return willExpireToken(accessToken) ? null : accessToken;\n}\nexport function getRefreshTokenApi() {\n  const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n  if (!refreshToken || refreshToken === 'null') {\n    return null;\n  }\n\n  return willExpireToken(refreshToken) ? null : refreshToken;\n}\nexport function refreshAccessTokenApi(refreshToken) {\n  const url = `${basePath}/${apiVersion}/refresh-access-token`;\n  const bodyObj = {\n    refreshToken: refreshToken\n  };\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(bodyObj),\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n  fetch(url, params).then(response => {\n    if (response.status !== 200) {\n      return null;\n    }\n\n    return response.json();\n  }).then(result => {\n    if (!result) {\n      logout();\n    } else {\n      const {\n        accessToken,\n        refreshToken\n      } = result;\n      localStorage.setItem(ACCESS_TOKEN, accessToken);\n      localStorage.setItem(REFRESH_TOKEN, refreshToken);\n    }\n  });\n}\nexport function logout() {\n  localStorage.removeItem(ACCESS_TOKEN);\n  localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n  const seconds = 60;\n  const metaToken = jwtDecode(token);\n  const {\n    exp\n  } = metaToken;\n  const now = (Date.now() + seconds) / 1000;\n  return now > exp;\n}","map":{"version":3,"sources":["/Users/cesarvalleiva/Desktop/proyectos/web/client/src/api/auth.js"],"names":["basePath","apiVersion","ACCESS_TOKEN","REFRESH_TOKEN","jwtDecode","getAccessTokenApi","accessToken","localStorage","getItem","willExpireToken","getRefreshTokenApi","refreshToken","refreshAccessTokenApi","url","bodyObj","params","method","body","JSON","stringify","headers","fetch","then","response","status","json","result","logout","setItem","removeItem","token","seconds","metaToken","exp","now","Date"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,UAArC;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,SAASC,iBAAT,GAA6B;AAChC,QAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqBN,YAArB,CAApB;;AAEA,MAAG,CAACI,WAAD,IAAgBA,WAAW,KAAK,MAAnC,EAA2C;AACvC,WAAO,IAAP;AACH;;AAED,SAAOG,eAAe,CAACH,WAAD,CAAf,GAA+B,IAA/B,GAAsCA,WAA7C;AACH;AAED,OAAO,SAASI,kBAAT,GAA8B;AACjC,QAAMC,YAAY,GAAGJ,YAAY,CAACC,OAAb,CAAqBL,aAArB,CAArB;;AAEA,MAAG,CAACQ,YAAD,IAAiBA,YAAY,KAAK,MAArC,EAA6C;AACzC,WAAO,IAAP;AACH;;AAED,SAAOF,eAAe,CAACE,YAAD,CAAf,GAAgC,IAAhC,GAAuCA,YAA9C;AACH;AAED,OAAO,SAASC,qBAAT,CAA+BD,YAA/B,EAA6C;AAChD,QAAME,GAAG,GAAI,GAAEb,QAAS,IAAGC,UAAW,uBAAtC;AACA,QAAMa,OAAO,GAAG;AACZH,IAAAA,YAAY,EAAEA;AADF,GAAhB;AAGA,QAAMI,MAAM,GAAG;AACXC,IAAAA,MAAM,EAAE,MADG;AAEXC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAFK;AAGXM,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAHE,GAAf;AAQAC,EAAAA,KAAK,CAACR,GAAD,EAAME,MAAN,CAAL,CACCO,IADD,CACMC,QAAQ,IAAI;AACd,QAAGA,QAAQ,CAACC,MAAT,KAAoB,GAAvB,EAA4B;AACxB,aAAO,IAAP;AACH;;AACD,WAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,GAND,EAOCH,IAPD,CAOMI,MAAM,IAAI;AACZ,QAAG,CAACA,MAAJ,EAAY;AACRC,MAAAA,MAAM;AACT,KAFD,MAEO;AACH,YAAM;AAAErB,QAAAA,WAAF;AAAeK,QAAAA;AAAf,UAAgCe,MAAtC;AACAnB,MAAAA,YAAY,CAACqB,OAAb,CAAqB1B,YAArB,EAAmCI,WAAnC;AACAC,MAAAA,YAAY,CAACqB,OAAb,CAAqBzB,aAArB,EAAoCQ,YAApC;AACH;AACJ,GAfD;AAgBH;AAED,OAAO,SAASgB,MAAT,GAAkB;AACrBpB,EAAAA,YAAY,CAACsB,UAAb,CAAwB3B,YAAxB;AACAK,EAAAA,YAAY,CAACsB,UAAb,CAAwB1B,aAAxB;AACH;;AAED,SAASM,eAAT,CAAyBqB,KAAzB,EAAgC;AAC5B,QAAMC,OAAO,GAAG,EAAhB;AACA,QAAMC,SAAS,GAAG5B,SAAS,CAAC0B,KAAD,CAA3B;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAUD,SAAhB;AACA,QAAME,GAAG,GAAG,CAACC,IAAI,CAACD,GAAL,KAAaH,OAAd,IAAyB,IAArC;AAEA,SAAOG,GAAG,GAAGD,GAAb;AACH","sourcesContent":["import { basePath, apiVersion } from './config';\nimport { ACCESS_TOKEN, REFRESH_TOKEN } from '../utils/constants';\nimport jwtDecode from 'jwt-decode';\n\nexport function getAccessTokenApi() {\n    const accessToken = localStorage.getItem(ACCESS_TOKEN);\n\n    if(!accessToken || accessToken === 'null') {\n        return null;\n    }\n\n    return willExpireToken(accessToken) ? null : accessToken;\n}\n\nexport function getRefreshTokenApi() {\n    const refreshToken = localStorage.getItem(REFRESH_TOKEN);\n\n    if(!refreshToken || refreshToken === 'null') {\n        return null;\n    }\n\n    return willExpireToken(refreshToken) ? null : refreshToken;\n}\n\nexport function refreshAccessTokenApi(refreshToken) {\n    const url = `${basePath}/${apiVersion}/refresh-access-token`;\n    const bodyObj = {\n        refreshToken: refreshToken\n    }\n    const params = {\n        method: \"POST\",\n        body: JSON.stringify(bodyObj),\n        headers: {\n            \"Content-type\": \"application/json\"\n        }\n    }\n\n    fetch(url, params)\n    .then(response => {\n        if(response.status !== 200) {\n            return null;\n        }\n        return response.json();\n    })\n    .then(result => {\n        if(!result) {\n            logout();\n        } else {\n            const { accessToken, refreshToken } = result;\n            localStorage.setItem(ACCESS_TOKEN, accessToken);\n            localStorage.setItem(REFRESH_TOKEN, refreshToken);\n        }\n    })\n}\n\nexport function logout() {\n    localStorage.removeItem(ACCESS_TOKEN);\n    localStorage.removeItem(REFRESH_TOKEN);\n}\n\nfunction willExpireToken(token) {\n    const seconds = 60;\n    const metaToken = jwtDecode(token);\n    const { exp } = metaToken;\n    const now = (Date.now() + seconds) / 1000;\n\n    return now > exp;\n}"]},"metadata":{},"sourceType":"module"}