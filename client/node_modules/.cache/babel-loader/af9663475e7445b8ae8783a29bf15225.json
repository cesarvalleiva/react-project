{"ast":null,"code":"import { basePath, apiVersion } from './config';\nexport function signUpApi(data) {\n  const url = `${basePath}/${apiVersion}/sign-up`;\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    if (result.user) {\n      return {\n        ok: true,\n        message: 'Usuario creado con éxito'\n      };\n    }\n\n    return {\n      ok: false,\n      message: result.message\n    };\n  }).catch(err => {\n    return {\n      ok: false,\n      message: err.message\n    };\n  });\n}\nexport function signInApi(data) {\n  const url = `${basePath}/${apiVersion}/sign-in`;\n  const params = {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function getUsersApi(token) {\n  const url = `${basePath}/${apiVersion}/users`;\n  const params = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    }\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function getUsersActiveApi(token, status) {\n  const url = `${basePath}/${apiVersion}/users-active?active=${status}`;\n  const params = {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: token\n    }\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function uploadAvatarApi(token, avatar, userId) {\n  const url = `${basePath}/${apiVersion}/upload-avatar/${userId}`;\n  const formData = new FormData();\n  formData.append('avatar', avatar, avatar.name);\n  const params = {\n    method: \"PUT\",\n    body: formData,\n    headers: {\n      Authorization: token\n    }\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function getAvatarApi(avatarName) {\n  const url = `${basePath}/${apiVersion}/get-avatar/${avatarName}`;\n  return fetch(url).then(response => {\n    return response.url;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function updateUserApi(token, user, userId) {\n  const url = `${basePath}/${apiVersion}/update-user/${userId}`;\n  const params = {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: token\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result;\n  }).catch(err => {\n    return err.messageM;\n  });\n}\nexport function activateUserApi(token, userId, status) {\n  const url = `${basePath}/${apiVersion}/activate-user/${userId}`;\n  const params = {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json\",\n      Authorization: token\n    },\n    body: JSON.stringify({\n      active: status\n    })\n  };\n  return fetch(url, params).then(response => {\n    return response.json();\n  }).then(result => {\n    return result.message;\n  }).catch(err => {\n    return err.message;\n  });\n}\nexport function deleteUserApi(token, userId) {\n  const url = `${basePath}/${apiVersion}/delete-user/${userId}`;\n  const params = {\n    method: \"DELETE\"\n  };\n}","map":{"version":3,"sources":["/Users/cesarvalleiva/Desktop/proyectos/web/client/src/api/user.js"],"names":["basePath","apiVersion","signUpApi","data","url","params","method","body","JSON","stringify","headers","fetch","then","response","json","result","user","ok","message","catch","err","signInApi","getUsersApi","token","Authorization","getUsersActiveApi","status","uploadAvatarApi","avatar","userId","formData","FormData","append","name","getAvatarApi","avatarName","updateUserApi","messageM","activateUserApi","active","deleteUserApi"],"mappings":"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","sourcesContent":["import { basePath, apiVersion } from './config';\n\nexport function signUpApi(data) {\n    const url = `${basePath}/${apiVersion}/sign-up`;\n    const params = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    };\n\n    return fetch(url, params)\n    .then(response => {\n            return response.json();\n        }).then(result => {\n            if(result.user) {\n                return { ok: true, message: 'Usuario creado con éxito' };\n            } \n            return { ok: false, message: result.message };\n        }).catch(err => {\n            return { ok: false, message: err.message };\n        })\n}\n\nexport function signInApi(data) {\n    const url = `${basePath}/${apiVersion}/sign-in`;\n    const params = {\n            method: \"POST\",\n            body: JSON.stringify(data),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n\n    return fetch(url, params)\n    .then(response => {\n            return response.json();\n        }).then(result => {\n            return result;\n        }).catch(err => {\n            return err.message\n        })\n}\n\nexport function getUsersApi(token) {\n    const url = `${basePath}/${apiVersion}/users`;\n    const params = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: token\n            }\n        };\n\n    return fetch(url, params)\n    .then(response => {\n        return response.json();\n    })\n    .then(result => {\n        return result;\n    })\n    .catch(err => {\n        return err.message;\n    });\n}\n\nexport function getUsersActiveApi(token, status) {\n    const url = `${basePath}/${apiVersion}/users-active?active=${status}`;\n    const params = {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: token\n            }\n        };\n\n    return fetch(url, params)\n    .then(response => {\n        return response.json();\n    })\n    .then(result => {\n        return result;\n    })\n    .catch(err => {\n        return err.message;\n    });\n}\n\nexport function uploadAvatarApi(token, avatar, userId) {\n    const url = `${basePath}/${apiVersion}/upload-avatar/${userId}`;\n    \n    const formData = new FormData();\n    formData.append('avatar', avatar, avatar.name);\n\n    const params = {\n        method: \"PUT\",\n        body: formData,\n        headers: {\n            Authorization: token\n        }\n    }\n\n    return fetch(url, params)\n    .then(response => {\n        return response.json()\n    })\n    .then(result => {\n        return result;\n    })\n    .catch(err => {\n        return err.message;\n    })\n}\n\nexport function getAvatarApi(avatarName) {\n    const url = `${basePath}/${apiVersion}/get-avatar/${avatarName}`;\n\n    return fetch(url)\n    .then(response => {\n        return response.url;\n    })\n    .catch(err => {\n        return err.message;\n    })\n}\n\nexport function updateUserApi(token, user, userId) {\n    const url = `${basePath}/${apiVersion}/update-user/${userId}`;\n\n    const params = {\n        method: \"PUT\",\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: token\n        },\n        body: JSON.stringify(user)\n    }\n\n    return fetch(url, params).then(response => {\n        return response.json();\n    }).then(result => {\n        return result;\n    }).catch(err => {\n        return err.messageM\n    })\n\n}\n\nexport function activateUserApi(token, userId, status) {\n    const url = `${basePath}/${apiVersion}/activate-user/${userId}`;\n\n    const params = {\n        method: \"PUT\",\n        headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: token\n        },\n        body: JSON.stringify({\n            active: status\n        })\n    }\n\n    return fetch(url, params).then(response => {\n        return response.json();\n    }).then(result => {\n        return result.message;\n    }).catch(err => {\n        return err.message;\n    })\n}\n\nexport function deleteUserApi(token, userId) {\n    const url = `${basePath}/${apiVersion}/delete-user/${userId}`;\n\n    const params = {\n        method: \"DELETE\"\n    }\n}"]},"metadata":{},"sourceType":"module"}